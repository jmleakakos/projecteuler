# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
# 
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# 
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

import Kernel
import Enum, only: [reduce: 3]

defmodule Euler do
  def fibsUpTo(n) do
    fibsUpTo(n, 1, 1, [1, 1])
  end
  
  def fibsUpTo(n, previous, current, list) do
    next = previous + current
    if(next <= n) do
      fibsUpTo(n, current, next, list ++ [next])
    else
      list
    end
  end
end

sumIfEvenFunc = fn(x, acc) -> if(rem(x, 2) == 0) do x + acc else acc end end

IO.puts reduce(Euler.fibsUpTo(4000000), 0, sumIfEvenFunc)